main(argc, argv[]):
  goldbach_pthread->numbers = create numbers_array(argv[])
  goldbach_pthread_t* goldbach_pthread  
  if goldbach_pthread then
    goldbach_pthread_create(numbers)
    goldbach_pthread_run(goldbach_pthread, argc,argv)
  end if

///////////////////////////////////////////////////////////////
//___________________goldbach_pthread________________________//
//////////////////////////////////////////////////////////////

goldbach_pthread_run(goldbach_pthread, argc, argv[]):
  if argc == 2 then
    shared consumer_count := argv[1]
  else
    shared consumer_count := sysconf(NProcessors)
  
  shared unit_count := integer(goldbach_pthread->getCount(number))
  shared queue := create_integer_queue()
  shared can_access_queue := semaphore(1)
  shared can_consume := semaphore(0)
  shared next_unit := 0
  shared can_access_next_unit := semaphore(1)
  shared consumed_count := 0
  shared can_access_consumed_count := semaphore(1)
  shared goldbach_sums := goldbach_pthread_create_matrix(consumer_count,
     n_sums, element_size)
  
  goldbach_pthread_create_threads(goldbach_pthread, numbers)
  goldbach_pthread_print_goldbach_sums(goldbach_pthread)


goldbach_pthread_create_threads(goldbach_pthread, numbers):
  number_count := goldbach_pthread->getCount(number)

  if number_count < consumer_count
    amount_consumers := number_count
  
  for index := 1 to amount_consumers do
    create_thread(1, producer)
    create_threads(consumer_count, consumer)
  end for

  join(producer)
  join(consumers)

calculate_goldbach(goldbach_pthread, numbers):
    number := argv[index]
    if is_even_number(number)
      goldbach_pthread->goldbach_sums := goldbach_strong_conjecture(number)
    else
      goldbach_pthread->goldbach_sums := goldbach_weak_conjecture(number)

///////////////////////////////////////////////////////////////
//_______________________producer____________________________//
//////////////////////////////////////////////////////////////
producer(goldbach_pthread):
  for int := 1 to goldbach_pthread->getCount(number)
    my_unit:= goldbach_pthread->getNumber()
    wait(can_access_queue)
      enqueue(queue, my_unit)
    signal(can_access_queue)
    // unit produced
    signal(can_consume)

///////////////////////////////////////////////////////////////
//_______________________consumer____________________________//
//////////////////////////////////////////////////////////////

consumer:
  while true do
    wait(can_access_consumed_count)
      if consumed_count >= unit_count then
        signal(can_access_consumed_count)
        break while
      end if
      consumed_count := consumed_count + 1
    signal(can_access_consumed_count)
    wait(can_consume)
    wait(can_access_queue)
      my_unit := dequeue(queue)
      // unit consumed
      signal(can_access_queue)
    calculate_goldbach(my_unit)
  end while