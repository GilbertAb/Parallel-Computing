main(argc, argv[]):
  goldbach_pthread_t* goldbach_pthread  
  if goldbach_pthread then
    goldbach_pthread_create()
    goldbach_pthread_run(goldbach_pthread, argc,argv)
  end if

///////////////////////////////////////////////////////////////
//___________________goldbach_pthread________________________//
//////////////////////////////////////////////////////////////

goldbach_pthread_run(goldbach_pthread, argc, argv[]):
  if argc == 2 then
    shared thread_count := argv[1]
  else
    shared thread_count := sysconf(NProcessors)


  shared goldbach_sums := goldbach_pthread_create_matrix(thread_count,
     n_sums, element_size)

  goldbach_pthread_create_threads(shared_data, argv)

  goldbach_pthread_print_goldbach_sums(shared_data)


goldbach_pthread_create_threads(shared_data, argv[]):
  amount_arguments := count_amount_arguments(argv[])
  amount_threads := thread_count

  if amount_arguments < thread_count
    amount_threads := amount_arguments
  
  start_index := 1
  last_index := amount_arguments / amount_threads
  for index := 1 to amount_threads do
    // calculate_goldbach = heavy_task
    create_thread(thread[index], calculate_goldbach, shared_data, start_index, last_index, argv)
    start_index := start_index + last_index
  end for

  for index := 1 to thread_count do
    join(thread[index])
  end for

calculate_goldbach(shared_data, start_index, last_index, argv[]):
  for index := start_index to last_index do
    number := argv[index]
    if is_even_number(number)
      shared_data->goldbah_sums := goldbach_strong_conjecture(number)
    else
      shared_data->goldbah_sums := goldbach_weak_conjecture(number)
  end for